unity_proj = subproject('unity')
unity_dep = unity_proj.get_variable('unity_dep')

test_deps = [unity_dep, sgc_dep]

# ALGORHITM
test_algorithm_exe = executable(
  'test_algorithm',
  'test_algorithm.c',
  dependencies: test_deps
  )
test('ALGORITHM', test_algorithm_exe)

# DEQUE
test_deque_exe = executable(
  'test_deque', 
  'test_deque.c', 
  dependencies: test_deps
  )
test('DEQUE', test_deque_exe)

# FORWARD LIST
test_flist_exe = executable(
  'test_flist', 
  'test_forward_list.c', 
  dependencies: test_deps
  )
test('FORWARD LIST', test_flist_exe)

# LIST
test_list_exe = executable(
  'test_list', 
  'test_list.c', 
  dependencies: test_deps
  )
test('LIST', test_list_exe)

# MAP
test_map_exe = executable(
  'test_map', 
  'test_map.c', 
  dependencies: test_deps
  )
test('MAP', test_map_exe)

# PRIORITY QUEUE
test_pqueue_exe = executable(
  'test_pqueue', 
  'test_priority_queue.c',
  dependencies: test_deps
  )
test('PRIORITY QUEUE', test_pqueue_exe)

# QUEUE
test_queue_exe = executable(
  'test_queue', 
  'test_queue.c',
  dependencies: test_deps
  )
test('QUEUE', test_queue_exe)

# SET
test_set_exe = executable(
  'test_set', 
  'test_set.c',
  dependencies: test_deps
  )
test('SET', test_set_exe)

# STACK
test_stack_exe = executable(
  'test_stack', 
  'test_stack.c',
  dependencies: test_deps
  )
test('STACK', test_stack_exe)

# STATIC DEQUE
test_static_deque_exe = executable(
  'test_static_deque', 
  'test_static_deque.c',
  dependencies: test_deps
  )
test('STATIC DEQUE', test_static_deque_exe)

# STATIC FORWARD LIST
test_static_flist_exe = executable(
  'test_static_flist', 
  'test_static_forward_list.c',
  dependencies: test_deps
  )
test('STATIC FORWARD LIST', test_static_flist_exe)

# STATIC LIST
test_static_list_exe = executable(
  'test_static_list', 
  'test_static_list.c',
  dependencies: test_deps
  )
test('STATIC LIST', test_static_list_exe)

# STATIC MAP
test_static_map_exe = executable(
  'test_static_map', 
  'test_static_map.c',
  dependencies: test_deps
  )
test('STATIC MAP', test_static_map_exe)

# STATIC PRIORITY QUEUE
test_static_pqueue_exe = executable(
  'test_static_pqueue', 
  'test_static_priority_queue.c',
  dependencies: test_deps
  )
test('STATIC PRIORITY QUEUE', test_static_pqueue_exe)

# STATIC QUEUE
test_static_queue_exe = executable(
  'test_static_queue', 
  'test_static_queue.c',
  dependencies: test_deps
  )
test('STATIC QUEUE', test_static_queue_exe)

# STATIC STACK
test_static_stack_exe = executable(
  'test_static_stack', 
  'test_static_stack.c',
  dependencies: test_deps
  )
test('STATIC STACK', test_static_stack_exe)

# STATIC UNORDERED MAP
test_static_umap_exe = executable(
  'test_static_umap', 
  'test_static_unordered_map.c',
  dependencies: test_deps
  )
test('STATIC UNORDERED MAP', test_static_umap_exe)

# STATIC UNORDERED SET
test_static_uset_exe = executable(
  'test_static_uset', 
  'test_static_unordered_set.c',
  dependencies: test_deps
  )
test('STATIC UNORDERED SET', test_static_uset_exe)

# STATIC VECTOR
test_static_vector_exe = executable(
  'test_static_vector', 
  'test_static_vector.c',
  dependencies: test_deps
  )
test('STATIC VECTOR', test_static_vector_exe)

# STRING
test_string_exe = executable(
  'test_string', 
  'test_string.c',
  dependencies: test_deps
  )
test('STRING', test_string_exe)

# UNORDERED MAP
test_unordered_map_exe = executable(
  'test_unordered_map', 
  'test_unordered_map.c',
  dependencies: test_deps
  )
test('UNORDERED MAP', test_unordered_map_exe)

# UNORDERED SET
test_unordered_set_exe = executable(
  'test_unordered_set', 
  'test_unordered_set.c',
  dependencies: test_deps
  )
test('UNORDERED SET', test_unordered_set_exe)

# VECTOR
test_vector_exe = executable(
  'test_vector', 
  'test_vector.c',
  dependencies: test_deps
  )
test('VECTOR', test_vector_exe)
